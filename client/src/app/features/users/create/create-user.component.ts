import { Component, inject } from '@angular/core';
import {
  FormBuilder,
  FormGroup,
  Validators,
  ReactiveFormsModule,
} from '@angular/forms';
import { CommonModule } from '@angular/common';

// üëá –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è Angular Material Dialog
import {
  MatDialogRef,
  MAT_DIALOG_DATA,
  MatDialogContent,
  MatDialogActions,
  MatDialogTitle,
} from '@angular/material/dialog';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatButtonModule } from '@angular/material/button';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { UsersService } from '../users.service';
import { MatSelectModule } from '@angular/material/select';
import { UserPositionEnum, UserRoleEnum } from '../../../models/user.models';
import { TranslatePipe } from '@ngx-translate/core';

@Component({
  selector: 'app-user-update',
  standalone: true,
  // üëá –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥—É–ª–∏ Material Design –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–π —Ñ–æ—Ä–º—ã
  imports: [
    CommonModule,
    ReactiveFormsModule,
    MatFormFieldModule,
    MatInputModule,
    MatButtonModule,
    MatProgressSpinnerModule,
    MatDialogContent,
    MatDialogActions,
    MatSelectModule,
    MatDialogTitle,
    TranslatePipe,
  ],
  templateUrl: './create-user.component.html',
  styleUrls: ['./create-user.component.scss'],
})
export class CreateUserComponent {
  profileForm: FormGroup;
  errorMessage = '';

  roleOptions = [
    { value: UserRoleEnum.USER, viewValue: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' },
    { value: UserRoleEnum.ADMIN, viewValue: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' },
  ];

  positionOptions = [
    { value: UserPositionEnum.MANAGER, viewValue: '–£–ø—Ä–∞–≤–ª—è—é—â–∏–π' },
    { value: UserPositionEnum.ARCHITECT, viewValue: '–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä' },
    { value: UserPositionEnum.CONSTRUCTOR, viewValue: '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä' },
    { value: UserPositionEnum.ENGINEER, viewValue: '–ò–Ω–∂–µ–Ω–µ—Ä' },
  ];

  private fb = inject(FormBuilder);
  private userService = inject(UsersService);

  // üëá –ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∏–∞–ª–æ–≥–æ–º
  private dialogRef = inject(MatDialogRef<CreateUserComponent>);
  public data: { id: string } = inject(MAT_DIALOG_DATA);

  constructor() {
    this.profileForm = this.fb.group({
      fullName: ['', [Validators.required, Validators.minLength(3)]],
      email: ['', [Validators.required, Validators.email]],
      passwordHash: ['', [Validators.required]],
      role: ['', [Validators.required]],
      position: ['', [Validators.required]],
    });
  }

  onSave(): void {
    if (this.profileForm.invalid) {
      return;
    }

    this.userService.createUser(this.profileForm.value).subscribe({
      next: (newUser) => {
        // üëá –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –∏ –ø–µ—Ä–µ–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–∑–∞–¥
        this.dialogRef.close(newUser);
      },
      error: (err) => {
        this.errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.';
        console.error(err);
      },
    });
  }

  onCancel(): void {
    // üëá –ü—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –±–µ–∑ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö
    this.dialogRef.close();
  }
}
