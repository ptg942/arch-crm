import { Component, OnInit, inject, signal, computed } from '@angular/core'; // üëà –î–æ–±–∞–≤–ª—è–µ–º signal –∏ computed
import { CommonModule } from '@angular/common';
import { RouterLink } from '@angular/router';
import { UsersService } from './users.service';
import { User } from '../../models/user.models';

// Angular Material Imports
import { MatTableDataSource, MatTableModule } from '@angular/material/table';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';
import { MatCardModule } from '@angular/material/card';
// import { MatLabel } from '@angular/material/form-field-module.d';
// import { MatFormField } from '@angular/material/form-field.d';
import { MatInput } from '@angular/material/input';
import { MatChipsModule } from '@angular/material/chips';
import { UserStatusPipe } from '../../pipes/userStatus.pipe';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –Ω–∞—à–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
interface UsersState {
  users: User[];
  isLoading: boolean;
  error: string | null;
}

@Component({
  selector: 'app-users',
  standalone: true,
  imports: [
    MatCardModule,
    MatIconModule,
    RouterLink,
    CommonModule,
    MatTableModule,
    MatProgressSpinnerModule,
    MatButtonModule,
    // MatLabel,
    // MatFormField,
    MatInput,
    MatChipsModule,
    UserStatusPipe,
  ],
  templateUrl: './users.component.html',
  styleUrls: ['./users.component.scss'],
})
export class UsersComponent implements OnInit {
  private usersService = inject(UsersService);
  visible = true;

  // 1. –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω —Å–∏–≥–Ω–∞–ª –¥–ª—è –≤—Å–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  private state = signal<UsersState>({
    users: [],
    isLoading: true,
    error: null,
  });

  // 2. –°–æ–∑–¥–∞–µ–º –≤—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –≤ —à–∞–±–ª–æ–Ω–µ
  users = computed(() => this.state().users);
  // isLoading: boolean = computed(() => this.state().isLoading);
  error = computed(() => this.state().error);

  dataSource = new MatTableDataSource<User>();
  isLoading = true;
  // 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ
  displayedColumns: string[] = [
    'position',
    'name',
    'email',
    'status',
    'actions',
  ];

  ngOnInit(): void {
    this.loadUsers();
  }

  loadUsers(): void {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å"
    this.state.update((current) => ({ ...current, isLoading: true }));

    this.usersService.getUsers().subscribe({
      next: (data) => {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
        this.state.set({ users: data, isLoading: false, error: null });
        this.dataSource.data = data;
        this.isLoading = false;
      },
      error: (err) => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', err);
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"
        this.state.set({
          users: [],
          isLoading: false,
          error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
        });
      },
    });
  }

  applyFilter(event: Event) {
    const filterValue = (event.target as HTMLInputElement).value;
    this.dataSource.filter = filterValue.trim().toLowerCase();
  }

  deleteUser(id: string): void {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?')) {
      this.usersService.deleteUser(id).subscribe({
        next: () => {
          // –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫, —É–±–∏—Ä–∞—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          this.state.update((current) => ({
            ...current,
            users: current.users.filter((u) => u._id !== id),
          }));
        },
        error: (err) => {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
          // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –≤ state
        },
      });
    }
  }
}
